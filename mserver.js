'use strict'
const http=require('http'),config=require('./package.json').config,rw=require('./'+config.build+'m.sw_r'),rest=require('./'+config.build+'m.sw_rest'),port=process.env.PORT||process.env.OPENSHIFT_NODEJS_PORT||8080,ipaddress=process.env.IP||process.env.OPENSHIFT_NODEJS_IP||'0.0.0.0',router=(req,res,data,config)=>{let postdata='';const method=req.method,path=req.url,accenc=req.headers['accept-encoding'],reqenc=req.headers['x-encoding'],brest=/rest\//.test(path),bfrest=/rest\/_app\//.test(path),bevent=/event-source\//.test(path),bfile=!(brest||bevent),arurl=path.split('?')[0].split('/'),index=arurl[(brest||bevent)?2:1],bzip=accenc&&accenc.match(/\bdeflate\b/),rzip=reqenc&&reqenc.match(/\bdeflate\b/);console.log('ROUTER',req.headers['x-encoding']||'x.n.v.',req.headers['accept-encoding']||'ac.n.v.',req.url,req.method);if(config.is_log)data._log.push({time:Date.now(),method:req.method,path:req.url,remote:req.connection.remoteAddress.split(':').pop()})
let writeSStream=new require('stream').Writable(),ldata=[],ldata_length=0;writeSStream.on('finish',()=>{let buf= Buffer.alloc(ldata_length),pos=0;for(let i=0,len=ldata.length,pos=0;i<len;i++){ldata[i].copy(buf,pos);pos+=ldata[i].length}
postdata=buf.toString();console.log('WRITESTREAM-FINISHED',buf.toString('hex').slice(0,100));if(config.is_debug)console.log(`Finish WRITESSTREAM for LEN ${ldata_length} ${postdata.length} `);res.setHeader('Access-Control-Allow-Origin','*');res.writeHead(200,{'content-encoding':'deflate','content-type':(brest&&(!bfrest))?'application/json':''});let readStream=new require('stream').Readable();if(bfile){readStream.push(!data[index]?data[config.first]:data[index])}
if(brest){rest(config,method,arurl,data,readStream,postdata)}
if(bevent){}
readStream.push(null);if(bzip)readStream.pipe(require('zlib').createDeflate()).pipe(res);else readStream.pipe(res)});writeSStream.write=(d)=>{ldata.push(d);ldata_length+=d.length}
if(rzip){console.log('wir haben ein REQdeflate');req.pipe(require('zlib').createInflate()).pipe(writeSStream)}
else req.pipe(writeSStream);req.on('end',()=>{if(config.is_debug)console.log(`REQONEND ${bfrest?'FREST':''}${bfile?'FILE':''}${brest?'REST':''}${bevent?'EVENT':''} [${method}] ${path}(${arurl.length}) index:${index} data.l:${postdata.length} zip:${bzip}`)})};let data={'_utc':{},'_log':[],'_file':{},'_app':[],'_all':{},'default':' ','login':'<body>login <h3>sonst</h3> nix</body>'},stime=Date.now();if(config.is_backup)setInterval(()=>{Object.keys(data._utc).filter(e=>data._utc[e]>stime).forEach(async e=>await rw.wbF(e,config,data));stime=Date.now()},config.backup_time);http.createServer((req,res)=>router(req,res,data,config)).listen(port,ipaddress,()=>{if(config.is_debug)console.log(`listen on webport ${port} ${ipaddress}`)})
